{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Vector Remap Language",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#sstrings"
		},
		{
			"include": "#tstrings"
		},
		{
			"include": "#rstrings"
		},
		{
			"include": "#comparisons"
		},
		{
			"include": "#assignments"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#dots"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"match": "#.*",
					"name": "comment.line.number-sign.vrl"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"match": "\\b(?:abort|as|break|continue|else|false|for|if|impl|in|let|loop|null|return|self|std|then|this|true|type|until|use|while)\\b",
					"name": "keyword.control.vrl"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.vrl",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"match": "\\\\(?:[\"\\\\/'0nrt\\{\\}]|u[0-9a-fA-F]{2,6}|$)",
					"name": "constant.character.escape.vrl"
				},
				{
					"match": "\\\\.",
					"name": "invalid.illegal.unrecognized-string-escape.vrl"
				}
			]
		},
		"sstrings": {
			"name": "string.quoted.single.s.vrl",
			"begin": "s'",
			"end": "'",
			"patterns": [
				{
					"match": "\\\\(?:[\\\\/'0nrt\\{\\}]|u[0-9a-fA-F]{2,6}|$)",
					"name": "constant.character.escape.vrl"
				},
				{
					"match": "\\\\.",
					"name": "invalid.illegal.unrecognized-string-escape.vrl"
				}
			]
		},
		"tstrings": {
			"name": "string.quoted.single.t.vrl",
			"begin": "t'",
			"end": "'",
			"patterns": [
				{
					"match": "-?[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[12][0-9]|3[01])T(?:0[0-9]|1[0-9]|2[0-3]):(?:0[0-9]|[1-5][0-9]):(?:0[0-9]|[1-5][0-9]|60)(?:\\.[0-9]+)?(?:Z|[+-](?:0[0-9]|1[0-9]|2[0-3]):(?:0[0-9]|[1-5][0-9]))",
					"name": "constant.character.time.vrl"
				},
				{
					"match": ".",
					"name": "invalid.illegal.unrecognized-time-format.vrl"
				}
			]
		},
		"rstrings": {
			"name": "string.regexp.vrl",
			"begin": "r'",
			"end": "'",
			"patterns": [
				{
					"match": "\\\\(?:')",
					"name": "constant.character.escape.vrl"
				}
			]
		},
		"numbers": {
			"match": "(?>-?[0-9]+[0-9_]*\\.?[0-9_]*)",
			"name": "constant.numeric.vrl"
		},
		"functions": {
			"match": "\\b(?:append|chunks|push|decode_base16|decode_base64|decode_gzip|decode_mime_q|decode_percent|decode_punycode|decode_snappy|decode_zlib|decode_zstd|encode_base16|encode_base64|encode_gzip|encode_json|encode_key_value|encode_logfmt|encode_percent|encode_proto|encode_punycode|encode_snappy|encode_zlib|encode_zstd|to_bool|to_float|to_int|to_regex|to_string|from_unix_timestamp|to_syslog_facility|to_syslog_level|to_syslog_severity|to_unix_timestamp|assert|assert_eq|log|find_enrichment_table_records|get_enrichment_table_record|compact|filter|flatten|for_each|includes|keys|length|map_keys|map_values|match_array|strlen|unflatten|unique|values|get_secret|remove_secret|set_secret|set_semantic_meaning|del|exists|get|remove|set|decrypt|encrypt|hmac|md5|seahash|sha1|sha2|sha3|ip_aton|ip_cidr_contains|ip_ntoa|ip_ntop|ip_pton|ip_subnet|ip_to_ipv6|ipv6_to_ipv4|is_ipv4|is_ipv6|abs|ceil|floor|format_int|format_number|mod|round|match_datadog_query|merge|unnest|parse_apache_log|parse_aws_alb_log|parse_aws_cloudwatch_log_subscription_message|parse_aws_vpc_flow_log|parse_cef|parse_common_log|parse_csv|parse_duration|parse_etld|parse_glog|parse_grok|parse_groks|parse_influxdb|parse_int|parse_json|parse_key_value|parse_klog|parse_linux_authorization|parse_logfmt|parse_nginx_log|parse_proto|parse_query_string|parse_regex|parse_regex_all|parse_ruby_hash|parse_syslog|parse_timestamp|parse_tokens|parse_url|parse_user_agent|parse_xml|random_bool|random_bytes|random_float|random_int|uuid_from_friendly_id|uuid_v4|uuid_v7|camelcase|community_id|contains|contains_all|downcase|ends_with|find|join|kebabcase|match|match_any|parse_float|pascalcase|redact|replace|replace_with|screamingsnakecase|sieve|slice|snakecase|split|starts_with|strip_ansi_escape_codes|strip_whitespace|truncate|upcase|get_env_var|get_hostname|get_timezone_name|format_timestamp|now|array|bool|float|int|is_array|is_boolean|is_empty|is_float|is_integer|is_json|is_null|is_nullish|is_object|is_regex|is_string|is_timestamp|object|string|tag_types_externally|timestamp)(?:!|\\b)",
			"name": "support.function.vrl"
		},
		"comparisons": {
			"match": "==|!=",
			"name": "keyword.operator.comparison.vrl"
		},
		"assignments": {
			"match": "=|\\|=",
			"name": "keyword.operator.assignment.vrl"
		},
		"variables": {
			"match": "\\.?[a-zA-Z0-9][a-zA-Z0-9_]*",
			"name": "variable.name.vrl"
		},
		"dots": {
			"match": "\\.(?![a-zA-Z0-9])",
			"name": "markup.bold.dot.vrl"
		}
	},
	"scopeName": "source.vrl"
}
